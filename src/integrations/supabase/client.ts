// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get config from localStorage - read from database-config
const getSupabaseConfig = () => {
  const stored = localStorage.getItem('database-config');
  if (stored) {
    try {
      const parsed = JSON.parse(stored);
      // Check if it's a Supabase configuration with nested structure
      if (parsed.type === 'supabase' && parsed.supabase?.url && parsed.supabase?.anonKey) {
        return {
          url: parsed.supabase.url,
          anonKey: parsed.supabase.anonKey
        };
      }
    } catch {
      // Fall through to fallback config
    }
  }
  
  // Fallback to project defaults if no config or if PostgreSQL is configured
  return {
    url: 'https://drkxbrcpjdrophwtcekd.supabase.co',
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRya3hicmNwamRyb3Bod3RjZWtkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwODcwNzQsImV4cCI6MjA2ODY2MzA3NH0.2vNdDh37m_sCexlJeNFKWVKQbz8RaAb3AEAKguYMsfs'
  };
};

const config = getSupabaseConfig();
const SUPABASE_URL = config.url;
const SUPABASE_PUBLISHABLE_KEY = config.anonKey;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});